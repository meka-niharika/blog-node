<a href="/dashboard">&larr; Back</a>
<div class="admin-title">
  <h2>View / Edit Post</h2>
</div>

<style>
  #editor-container {
    height: 300px;
  }
  img {
    max-width: 100%;
  }
</style>

<form id="edit-form">
  <label for="title"><b>Title</b></label>
  <input type="text" placeholder="Post Title" id="title" name="title" value="<%= data.title %>" required>

  <label for="body"><b>Content</b></label>
  <div id="editor-container"></div>

  <!-- Clean Display of Content -->
  <div id="clean-content"></div>

  <button type="submit" class="btn">Update</button>
</form>

<!-- Include Quill.js -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>

<script>
  var quill = new Quill('#editor-container', {
    theme: 'snow',
    placeholder: 'Edit your content...',
    modules: {
      toolbar: [
        [{ 'header': [1, 2, false] }],
        ['bold', 'italic', 'underline', 'strike'],
        [{ 'color': [] }, { 'background': [] }],
        [{ 'align': [] }],
        ['blockquote', 'code-block'],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        ['link', 'image']
      ],
      imageResize: { 
        modules: ['Resize', 'DisplaySize', 'Toolbar']
      }
    }
  });

  // Load existing content into Quill editor
  var content = `<%- data.body %>`;
  quill.clipboard.dangerouslyPasteHTML(0, content);

  // Function to extract clean text
  function extractCleanText(html) {
    let doc = new DOMParser().parseFromString(html, "text/html");
    let result = "";

    doc.body.childNodes.forEach(node => {
      if (node.nodeName === "IMG") {
        result += `<img src="${node.src}" style="display: block; margin: auto; max-width: 100%;"> <br>`;
      } 
      else if (node.nodeName === "A") {
        result += `<a href="${node.href}" target="_blank">${node.href}</a><br>`;
      } 
      else if (node.nodeName === "LI") {
        result += `• ${node.textContent.trim()} <br>`;
      } 
      else if (node.nodeName === "BLOCKQUOTE") {
        result += `<blockquote style="font-style: italic; color: gray;">${node.textContent.trim()}</blockquote><br>`;
      } 
      else if (node.nodeType === Node.TEXT_NODE || node.nodeName === "P" || node.nodeName.startsWith("H")) {
        result += node.textContent.trim() + "<br><br>";
      }
    });

    return result;
  }

  // Load clean content into the div
  document.getElementById("clean-content").innerHTML = extractCleanText(content);

  document.getElementById("edit-form").addEventListener("submit", async function(event) {
    event.preventDefault(); // Prevent default form submission

    const title = document.getElementById("title").value.trim();
    const body = quill.root.innerHTML.trim();

    if (!title || !body) {
      alert("Title and Body are required!");
      return;
    }

    try {
      const response = await fetch("/edit-post/<%= data._id %>?_method=PUT", {
        method: "POST",  // Use POST because Express doesn't natively support `_method=PUT`
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ title, body })
      });

      if (response.ok) {
        window.location.href = "/dashboard"; // ✅ Redirect to dashboard after update
      } else {
        const errorText = await response.text();
        alert("Error updating post: " + errorText);
      }
    } catch (error) {
      console.error("Error:", error);
      alert("An unexpected error occurred.");
    }
  });
</script>
