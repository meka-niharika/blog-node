<a href="/dashboard">&larr; Back</a>
<div class="admin-title">
  <h2>Add New Post</h2>
</div>

<!-- Include Quill CSS -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<style>
  #editor-container {
    height: 300px;
  }
  img {
    max-width: 100%;
  }
</style>

<!-- Form -->
<form id="post-form">
  <label for="title"><b>Title</b></label>
  <input type="text" id="title" placeholder="Post Title" name="title" required>

  <label for="body"><b>Content</b></label>
  <div id="editor-container"></div>

  <!-- Clean Content Display -->
  <div id="clean-content"></div>

  <input type="submit" value="Add" class="btn">
</form>

<!-- Include Quill.js -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

<script>
  var quill = new Quill("#editor-container", {
    theme: "snow",
    placeholder: "Write something amazing...",
    modules: {
      toolbar: [
        [{ header: [1, 2, 3, 4, 5, false] }],
        ["bold", "italic", "underline", "strike"],
        [{ color: [] }, { background: [] }],
        [{ align: [] }],
        ["blockquote", "code-block"],
        [{ list: "ordered" }, { list: "bullet" }],
        ["link", "image"],
      ],
    },
  });

  // Function to extract clean text while preserving images, links, and lists
  function extractCleanText(html) {
    let doc = new DOMParser().parseFromString(html, "text/html");
    let result = "";

    doc.body.childNodes.forEach(node => {
      if (node.nodeName === "IMG") {
        result += `<img src="${node.src}" style="display: block; margin: auto; max-width: 100%;"> <br>`;
      } 
      else if (node.nodeName === "A") {
        result += `<a href="${node.href}" target="_blank">${node.href}</a><br>`;
      } 
      else if (node.nodeName === "LI") {
        result += `â€¢ ${node.textContent.trim()} <br>`;
      } 
      else if (node.nodeName === "BLOCKQUOTE") {
        result += `<blockquote style="font-style: italic; color: gray;">${node.textContent.trim()}</blockquote><br>`;
      } 
      else if (node.nodeType === Node.TEXT_NODE || node.nodeName === "P" || node.nodeName.startsWith("H")) {
        result += node.textContent.trim() + "<br><br>";
      }
    });

    return result;
  }

  // Update clean content display whenever the editor content changes
  quill.on("text-change", function() {
    document.getElementById("clean-content").innerHTML = extractCleanText(quill.root.innerHTML);
  });

  document.getElementById("post-form").onsubmit = async function (event) {
    event.preventDefault();

    let title = document.getElementById("title").value.trim();
    let content = quill.root.innerHTML.trim();
    let cleanContent = extractCleanText(content);

    if (!title || !content || content === "<p><br></p>") {
      alert("Title and body are required!");
      return;
    }

    let response = await fetch("/add-post", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ title, body: content, textOnly: cleanContent }),
    });

    let result = await response.text();
    alert(result);

    if (response.ok) {
      window.location.href = "/dashboard";
    }
  };
</script>
